import { Button } from "@/components/ui/button";
import { Download, Edit, ArrowRight } from "lucide-react";
import { useState } from "react";
import { useRouter } from "next/navigation";

export function ButtomBar({ showValidate = true, onValidate }: { showValidate?: boolean, onValidate?: () => Promise<void> }) {
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleValidate = async () => {
    setLoading(true);
    if (onValidate) {
      await onValidate();
    }
    setLoading(false);
    router.push("/dashboard/critical-report");
  };

  const handleDownload = () => {
    // Get the summary and business idea from localStorage
    const savedSummary = localStorage.getItem('brandorb_summary');
    const savedBusinessIdea = localStorage.getItem('brandorb_business_idea');
    
    if (!savedSummary || !savedBusinessIdea) {
      console.error('No summary data found to download');
      return;
    }

    // Create the content for the download
    const content = `# Business Plan Summary

## Business Idea
${savedBusinessIdea}

## Detailed Analysis
${savedSummary}

---
Generated by BrandOrb AI on ${new Date().toLocaleDateString()}
`;

    // Create a blob and download link
    const blob = new Blob([content], { type: 'text/markdown;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    
    // Create a temporary download link
    const link = document.createElement('a');
    link.href = url;
    link.download = `business-plan-summary-${new Date().toISOString().split('T')[0]}.md`;
    
    // Trigger the download
    document.body.appendChild(link);
    link.click();
    
    // Clean up
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleEdit = () => {
    // Redirect to onboarding page to edit answers
    router.push('/onboarding');
  };

  return (
    <div className="fixed bottom-0 left-0 right-0 p-4 bg-background/80 backdrop-blur-sm border-t border-border flex gap-3 z-50 justify-end">
      <Button variant="outline" onClick={handleDownload}>
        <Download className="h-4 w-4 mr-2" />
        Download
      </Button>
      <Button variant="outline" onClick={handleEdit}>
        <Edit className="h-4 w-4 mr-2" />
        Edit
      </Button>
      {showValidate && (
        <Button
          className="bg-primary hover:bg-primary/90 text-white"
          onClick={handleValidate}
          disabled={loading}
        >
          {loading ? "Validating..." : "Validate"}
          <ArrowRight className="h-4 w-4 ml-2" />
        </Button>
      )}
    </div>
  );
}
